data(olive)
names(olive)
olive[,-1]
head(olive[,-1])
head(olive)
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
plot(xValues, yValues)
library(splines)
?rmse
??rmse
libary(metrics)
library(metrics)
install.packages("Metrics")
library(metrics)
library(Metrics)
?rmse
sp1=ns(xValues,df=1)
sp2=ns(xValues,df=2)
sp3=ns(xValues,df=3)
sp4=ns(xValues,df=4)
sp5=ns(xValues,df=5)
for(i in 1:10) {sp[i]=ns(xValues,df=i)}
for(i in 1:10) {sp[i]<-ns(xValues,df=i)}
sp
sp=seq(1.0,10.0,1.0)
for(i in 1:10) {sp[i]<-ns(xValues,df=i)}
sp[1]
sp[2]
class(sp1)
rm(sp)
sp=vec()
sp=vector()
for(i in 1:10) {sp[i]<-ns(xValues,df=i)}
?rep
rm(sp)
sp=rep(sp1,10)
for(i in 1:10) {sp[i]<-ns(xValues,df=i)}
rm(sp)
sp<-list()
for(i in 1:10) {sp[i]<-ns(xValues,df=i)}
sp[1]
sp[2]
rm(sp)
sp[2]
for(i in 1:10) {assign(sp[i]<-ns(xValues,df=i))}
sp<-list()
for(i in 1:10) {assign(sp[i]<-ns(xValues,df=i))}
sp<-list()
for(i in 1:10) {sp[[i]]<-ns(xValues,df=i)}
sp[1]
sp1
sp1==sp[1]
class(sp1)
class(sp[1])
class(sp[[1])
class(sp[[1]])
summary(sp[[1]])
summary(sp[[2]])
lm1=lm(yValues~sp[[1]])
summary(lm1)
rmse(lm1)
?rmse
rmse(xValues, lm1$fitted)
lm<-list()
for(i in 1:10) {lm[[i]]<-lm(yValues~sp[[i]])}
se<-list()
for(i in 1:10) {rmse(xValues,lm[[i]])}
for(i in 1:10) {rmse(xValues,lm[[i]]$fitted)}
for(i in 1:10) {print(rmse(xValues,lm[[i]]$fitted))}
TEST<-list()
for(i in 1:10) {TEST[[i]]<-ns(xValues,df=i)}
summary(TEST[[1]])
for (i in 1:10) {TEST<-ns(xValues,df=i)}
for(i in 1:10) {TEST[[i]]<-ns(xValues,df=i)}
TEST<-list()
for(i in 1:10) {TEST[[i]]<-ns(xValues,df=i)}
TEST<-list()
for(i in 1:10) {TEST<-ns(xValues,df=i)}
TEST<-list()
for(i in 1:10) {TEST<-ns(xValues,df=i)}
TEST<-list()
for(i in 1:10) {TEST[[i]]<-ns(xValues,df=i)}
TEST<-list()
for(i in 1:10) {TEST<-ns(xValues,df=i)}
class(TEST)
head(TEST)
head(sp[[1]])
head(sp[1])
head(sp1)
head(TEST)
class(TEST)
class(sp[[1]])
head(TEST)
head(sp[[1]])
head(sp1)
for(i in 1:10) {print(rmse(xValues,lm[[i]]$fitted))}
head(lm[[1]])
names(lm[[1]])
for(i in 1:10) {print(rmse(xValues,residuals(lm[[i]])))}
for(i in 1:10) {print(rmse(xValues,lm$residulas[[i]]))}
for(i in 1:10) {print(rmse(xValues,lm[[i]]$residuals))}
predict(lm[[1]])
rmse(yValues, predict(lm[1]))
rmse(yValues, predict(lm[[1]]))
for(i in 1:10) {print(rmse(yValues,predict(lm[[i]])))}
for(i in 1:10) {print(rmse(xValues,predict(lm[[i]])))}
library(simpleboot)
data(airquality)
attach(airquality)
install.packages("simpleboot")
library(simpleboot)
data(airquality)
attach(airquality)
r = 1:10
r = 1:10.0
r = 1:1:0.1
for(i in 1:10) {r=(rmse(xValues,predict(lm[[i]])))}
plot(r)
r
for(i in 1:10) {r[i]=(rmse(xValues,predict(lm[[i]])))}
r
plor(r)
plot(r)
lines(r)
names(airquality)
head(airquality)
summary(airquality$Wind)
seed(883883)
set.seed(883.883)
bootMean <- rep(NA,1000); sampledMean <- rep(NA,1000)
for(i in 1:1000){bootMean[i] <- mean(sample(airquality$Wind,replace=TRUE))}
summary(bootMean)
meanFunc=function(x,i){mean(x[i])}
bootMean
bootMean=boot(airquality$Wind, meanFunc,1000)
bootMean
sd(bootMean)
for(i in 1:1000){bootMean[i] <- mean(sample(airquality$Wind,replace=TRUE))}
sd(bootMean)
?sd
head(bootMean)
bootMean
bootMean=boot(airquality$Wind, meanFunc,1000)
bootMean
class(bootMean)
names(bootMean)
?boot
boot$t
bootMean$t
sd(bootMean$t)
class(bootMean$t)
class(bootMean$t[,:])
class(bootMean$t[,2])
class(bootMean$t[1])
sd(bootMean$t[1])
bootMean$t[1]
bootMean$t[1,]
bootMean$t[1,:]
bootMean$t[2,:]
dim(bootMean$t)
sd(bootMean$t[,1])
set.seed(883.883)
set.seed(883883)
bootMean=boot(airquality$Wind, meanFunc,1000)
sd(bootMean$t[,1])
summary(sd(bootMean$t[,1]))
set.seed(883833)
bootMean=boot(airquality$Wind, meanFunc,1000)
summary(sd(bootMean$t[,1]))
sd(airquality$Wind)
summmary(sd(airquality$Wind))
summary(sd(airquality$Wind))
set.seed(883833)
bootMean=boot(airquality$Wind, meanFunc,1000)
bootMean
quantile(airquality$Wind,.75)
set.seed(883833)
result=one.boot(airquality$Wind, quantile, R=1000, prob=0.75)
result=one.boot(airquality$Wind, quantile, R=1000, probs=0.75)
result
result$t
sd(b$t)
sd(result$t)
sd(result$t[1,])
result$1[1,]
result$t[1,]
result$t[1,:]
result$t[:,1]
result$t[,1]
sd(result$t[,1])
set.seed(883833)
bootMean=boot(airquality$Wind, quantile,R=1000,probs=.75)
warnings()
data(Cars93,package="MASS")
set.seed(883833)
sd(result$t)
sd(result$t[,1])
library(ipred)
install.packages("ipred")
library(ipred)
names(Cars93)
bagTree=bagging(DriveTrain~Price+Type,data=Cars93,coob=TRUE)
set.seed(7363)
newdata = data.frame(Type = "Large",Price = 20)
sessionInfo()
library(tree)
my.stat<-function(all,train,test){}
my.stat<-function(all,train,test){
my.tree=tree(DriveTrain~Price+Type,data=all[train])
as.integer(predict(my.tree,newdata=test,type="class"))
}
cars.boot=boot(data=Cars93,statistic=my.stat,R=3,test=newdata)
my.stat<-function(all,train,test){
my.tree=tree(DriveTrain~Price+Type,data=all[train,])
as.integer(predict(my.tree,newdata=test,type="class"))
}
cars.boot=boot(data=Cars93,statistic=my.stat,R=3,test=newdata)
cars.boot$t
table(levels(Cars93$DriveTrain)[cars.boot$1[,1]])
table(levels(Cars93$DriveTrain)[cars.boot$t[,1]])
levels(Cars93$DriveTrain)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
as.factor(vowel.test$y)
class(vowel.test$y)
vowel.test$y=as.factor(vowel.test$y)
class(vowel.test$y)
vowel.train$y=as.factor(vowel.train$y)
library(randomForest)
install.packages("randomForest")
library(randomForest)
forest=randomForest(y~. ,data=vowel.train, prox=TRUE)
install.packages("e1071")
library(e1071)
p.svm=svm(y~. ,data=vowel.train, prox=TRUE)
p.svm
forest
predict(vowel.test$y, forest(vowel.test))
head(vowel.test)
head(vowel.test[,-1])
predict(vowel.test$y, forest(vowel.test[,-1]))
pr.forest=predict(forest, vowel.test)
pr.forest==vowel.test$y
mean(pr.forest!=vowel.test$y)
set.seed(33833)
forest=randomForest(y~. ,data=vowel.train, prox=TRUE)
pr.forest=predict(forest, vowel.test)
mean(pr.forest!=vowel.test$y)
p.svm=svm(y~. ,data=vowel.train, prox=TRUE)
pr.svm=predict(p.svm, vowel.test)
mean(pr.svm!=vowel.test$y)
same=pr.svm==pr.forest
smae
same
ls
pr.svm[same]
same
mean(pr.svm[same]!=vowel.test[same]$y)
mean(pr.svm[same]!=vowel.test[same,1])
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
table(pValues)
summary(pValues)
pValues > .1
sum(pValues > .1)
sum(pValues < .1/100)
?sort
sort(pValues)
?bh
?fdr
sum(p.adjust(pValues,method="bonferroni"))
sum(p.adjust(pValues,method="bonferroni")<0.1)
sum(p.adjust(pValues,method="bh")<0.1)
sum(p.adjust(pValues,method="BH")<0.1)
?rlm
library(MASS)
?rlm
rlm
X=rnorm(50)
e=rnorm(50)
b1=1; b2=2
b0-1;b1=2
b0-1;b1=2
b0=1;b1=2
y=b0+b1*X+e
plot(y)
lines(rlm(y))
lines(rlm(X,y))
l=rlm(X,y)
l
plot(l)
plot(,Xl)
plot(X,l)
plt(l)
plot(l)
l=lm(X,y)
l=lm(y~X)
plot(l)
plot(l)
rl=rlm(y~X)
plot(rl)
plot(X,y)
abline(l)
anline(rl,col="red")
abline(rl,col="red")
subX=X<2
subX
rl2=rlm(y~X)
rl2=rlm(y[subX]~X[subX])
subX=X<1.5
rl2=rlm(y[subX]~X[subX])
abline(rl,col="blue")
subY=y<4
rl3=rlm(y[subY]~X[subY])
abline(rl2,col="red")
abline(rl3,col="green")
l2=lm(y[subY]~X[subY])
abline(l2,col="red")
find.package("devtools")
install.package("devtools")
install.packages("devtools")
find.packages("pracma")
find.package("pracma")
install.packages("pracma")
libary(devtools)
library(devtools)
find_rtools()
install.packages("kernsmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
getwd()
mkwd("Coursera")
setwd("Coursera")
dir()
setwd("Coursera//R")
dir()
n=1000
df=data.frame(time=1:n,y=runif(n))
window=100
for(i in 1:(n-window)) {
flush.console()
plot(df$time,df$y,type='l',xlim=c(i,i+window))
Sys.sleep(.09)
}
# for(i in 1: length(temp$Time[1:10000])) {
for (i in 1:10000) # The length of a vector of 10000 is always 10000
flush.console()
# plot(temp$Time[i:i+100],temp$Open[i:i+100],
# Don't bother subsetting the x and y variables of your plot.
# plot() will automatically just plot those in the window.
plot(temp$Time,temp$Open,
xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
# Why are you setting the y limits dynamically? Shouldn't they be constant?
# ,ylim=c(min(temp$Open[i:i+100]),max(tmep$Open[i:i+120])))
Sys.sleep(.09)
}
for (i in 1:10000) # The length of a vector of 10000 is always 10000
flush.console()
# plot(temp$Time[i:i+100],temp$Open[i:i+100],
# Don't bother subsetting the x and y variables of your plot.
# plot() will automatically just plot those in the window.
plot(temp$Time,temp$Open,
xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
# Why are you setting the y limits dynamically? Shouldn't they be constant?
# ,ylim=c(min(temp$Open[i:i+100]),max(tmep$Open[i:i+120])))
Sys.sleep(.09)
}
# for(i in 1: length(temp$Time[1:10000])) {
for (i in 1:10000) {# The length of a vector of 10000 is always 10000
flush.console()
# plot(temp$Time[i:i+100],temp$Open[i:i+100],
# Don't bother subsetting the x and y variables of your plot.
# plot() will automatically just plot those in the window.
plot(temp$Time,temp$Open,
xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
# Why are you setting the y limits dynamically? Shouldn't they be constant?
# ,ylim=c(min(temp$Open[i:i+100]),max(tmep$Open[i:i+120])))
Sys.sleep(.09)
}
# for(i in 1: length(temp$Time[1:10000])) {
for (i in 1:10000) {# The length of a vector of 10000 is always 10000
flush.console()
# plot(temp$Time[i:i+100],temp$Open[i:i+100],
# Don't bother subsetting the x and y variables of your plot.
# plot() will automatically just plot those in the window.
plot(temp$Time,temp$Open,
xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)
}
# for(i in 1: length(temp$Time[1:10000])) {
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open,
xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)
}
# for(i in 1: length(temp$Time[1:10000])) {
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open,
xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)}
# for(i in 1: length(temp$Time[1:10000])) {
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open, xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)
}
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open, xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)
}
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open, xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)
}
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open, xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150]))
Sys.sleep(.09)
}
for (i in 1:10000) {
flush.console()
plot(temp$Time,temp$Open, xlim=c(as.numeric(temp$Time[i]),as.numeric(temp$Time[i+150])))
Sys.sleep(.09)
}
x<-4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
y=x[[1]]
class(y)
dim(y)
x <- 1:4
y<-2
x+y
class(xy)
class(x+y)
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
setwd("q1/")
read.csv("hw1_data.csv")
inp=read.csv("hw1_data.csv")
head(inp)
len(inp)
length(imp)
dim(inp)
length(inp)
size(inp)
tail(inp)
inp[47]
inp[47,]
is.na(inp)
sum(is.na(inp))
inp$Ozone
sum(is.na(inp$Ozone))
?mean
mean(inp$Ozone, na.rm=TRUE)
mean(inp$Ozone, na.rm=FALSE)
inp("Ozone">31)
inp["Ozone">31]
head(inp)
inp[inp$Ozone>31]
inp[inp$Ozone>31,]
inp[inp$Ozone>31 && inp$Ozone != NA,]
comp_inp=inp[!is.na(inp$Ozone)]
inp[inp$Ozone>31 && !is.na(inp),]
inp[inp$Ozone>31 && !is.na(inp$Ozone),]
clean_inp=inp[!is.na(inp$Ozone)]
?complete.cases
inp[inp$Ozone>31]
inp[inp$Ozone>31,]
inpo=inp[inp$Ozone>31,]
is.na(inp$OZone)
is.na(inp$OZone,)
is.na(inp$Ozone,)
is.na(inp$Ozone)
inpco=inp[!is.na(inp$Ozone)]
inpco=inp[!is.na(inp$Ozone),]
inpco
sum(is.na(incpo$Temp))
sum(is.na(inpco$Temp))
inpco[inpco$Temp>90]
inpco[inpco$Temp>90,]
inpcot=inpco[inpco$Temp>90,]
inpcot
mean(inpcot$Solar.R)
inp
head(inp)
inp[inp$Month==6]
inp[inp$Month==6,]
inpm6=inp[inp$Month==6,]
mean(inpm6$Temp)
inpm5=inp[inp$Month==5,]
max(inpm5$Ozone)
max(inpm5$Ozone, na.rm=TRUE)
